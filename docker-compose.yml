version: '3.8'

services:
  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/usr/src/app
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://newspulse_user:bV0_cCo-@postgres:5432/newspulse_db
      - REDIS_URL=redis://redis:6379/0

  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_URL: "http://backend:8000"
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://backend:8000
    networks:
      - app-network

  postgres:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: newspulse_user
      POSTGRES_PASSWORD: bV0_cCo-
      POSTGRES_DB: newspulse_db
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newspulse_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network

  celery_worker:
    build:
      context: ./backend
    command: ["celery", "-A", "background.celery_app", "worker", "--loglevel=info"]
    volumes:
      - ./backend:/usr/src/app
    networks:
      - app-network
    depends_on:
      - redis
      - postgres
    environment:
      - DATABASE_URL=postgresql://newspulse_user:bV0_cCo-@postgres:5432/newspulse_db
      - REDIS_URL=redis://redis:6379/0

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
